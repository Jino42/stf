#ifndef MODULE_STRUCT_HL
# define MODULE_STRUCT_HL

#include "Base_NTL.hl"
#include "Range.hl"

typedef struct ALIGN sModuleParamPhysicNoise {
    float3 gravity;
} ModuleParamPhysicNoise;

typedef struct ALIGN sModuleParamPhysicGravity {
    float3 gravity;
} ModuleParamPhysicGravity;

typedef struct ALIGN sParticleDataPhysic {
    float3 velocity;
    float mass;
} ParticleDataPhysic;

typedef struct ALIGN sModuleParamSPH {
    float pressure;
    float densityRef;
    float smoothingRadius;
    float viscosity;

	float h2;
    float h3;
    float h6;
    float h9;
    float Poly6;
    float Spiky;
} ModuleParamSPH;

typedef struct ALIGN sParticleDataSPH {
    float3 position;
    float density;
    float pressure;
    float mass;
    float3 force1;
    float3 force2;
    float3 velocity;
	int flag;
} ParticleDataSPH;

typedef struct ALIGN sEmitterParam {
	float3	position;
	uint 	nbMaxParticle;
	uint 	spawnParticlePerSec;
	float	deltaTime;
	float	time;
}   EmitterParam;

typedef struct ALIGN sParticleDataTarget {
	float3	target;
}   ParticleDataTarget;


typedef struct ALIGN sParticleDataMeshParticulizer {
	float3	position;
}   ParticleDataMeshParticulizer;

typedef struct ALIGN sModuleParamRequired {
		float gravityModifier;
		float simulationSpeed;
} ModuleParamRequired;

typedef struct ALIGN sModuleParamSpawn {
		Rangef startLifeTime;
		Rangef startSpeed;
		Rangef startSize;
		Rangef startRotation;
} ModuleParamSpawn;

typedef struct ALIGN sModuleParamSizeOverLifetime {
		Rangef size;
} ModuleParamSizeOverLifetime;

typedef struct ALIGN sParticleDataMovement {
	float3  acceleration;
	float3  velocity;
	float   masse;
} ParticleDataMovement;

#endif